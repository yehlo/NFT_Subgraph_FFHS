interface NFT{
  id: ID!
  tokenId: String!
  tokenURI: String!
  externalURL: String
  ipfsURI: String!
  image: String!
  owner: User!
  updatedAtTimestamp: BigInt!
  collection: String!
  traits: [Trait!] @derivedFrom(field: "tokenId")
}

type CryptoCoven implements NFT @entity {
  id: ID!
  tokenId: String!
  tokenURI: String!
  externalURL: String
  ipfsURI: String!
  image: String!
  owner: User!
  updatedAtTimestamp: BigInt!
  collection: String!
  name: String!
  description: String!
  type: String
  sun: String
  moon: String
  rising: String
  traits: [Trait!] @derivedFrom(field: "tokenId")
}

type BoredApe implements NFT @entity {
  id: ID!
  tokenId: String!
  tokenURI: String!
  externalURL: String
  ipfsURI: String!
  image: String!
  owner: User!
  updatedAtTimestamp: BigInt!
  collection: String!
  traits: [Trait!] @derivedFrom(field: "tokenId")
}

type Trait @entity {
  id: ID!
  collection: String!
  tokenId: NFT!
  traitName: String!
  traitValue: String!
}

type User @entity {
  id: ID!
  tokens: [NFT!] @derivedFrom(field: "owner")
}

type _Schema_
  @fulltext(
    name: "covenSearch"
    language: en
    algorithm: rank
    include: [{entity: "CryptoCoven", fields:
      [{ name: "name" }, { name: "description" }, { name: "type" }, { name: "sun" }, { name: "moon" }, { name: "rising" }
    ] }]
  )  type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
